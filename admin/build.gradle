plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'java'
    id 'idea'
    id 'com.bmuschko.docker-remote-api' version '3.2.3'
}

docker {
    registryCredentials {
        username = project.findProperty('docker.username')
        password = project.findProperty('docker.password')
    }
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

task buildImage(type: DockerBuildImage) {
    inputDir = rootDir
    dockerFile = new File("${rootDir.path}/docker/admin/Dockerfile")
    tag = "registry.ndogga.com/arava/arava-admin-api:latest"
}

task pushImage(type: DockerPushImage) {
    dependsOn buildImage
    conventionMapping.imageName = { buildImage.getTag() }
}

dependencies {

    compile project(":core")

    compile "org.springframework.boot:spring-boot-starter-mail:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-security:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "de.codecentric:spring-boot-admin-starter-client:$springBootAdminVersion"
    compile "de.codecentric:spring-boot-admin-starter-server:$springBootAdminVersion"

    compile "io.jsonwebtoken:jjwt:0.9.1"
    compile "com.auth0:java-jwt:3.4.1"
    compile 'commons-io:commons-io:2.6'

    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"

}

test {
    useJUnitPlatform()
}